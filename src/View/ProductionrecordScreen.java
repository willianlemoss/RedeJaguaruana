/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import JDBC.ConnectionFactory;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author willi
 */
public class ProductionrecordScreen extends javax.swing.JInternalFrame {

    /**
     * Creates new form ProductionrecordScreen
     */
    public ProductionrecordScreen() {
        initComponents();
        this.model = (DefaultTableModel) this.jTable1.getModel();
        this.model.setNumRows(0);
        this.motrarRegistro();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButtonCancelar = new javax.swing.JButton();
        jButtonExcluir = new javax.swing.JButton();
        jButtonVisualiar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldPesquisa = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Registro de produção");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Funcionario", "Serviço", "Quantidade", "Data lançamento", "Data pagamento", "Pago"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButtonExcluir.setText("Excluir");

        jButtonVisualiar.setText("Pagamento");
        jButtonVisualiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonVisualiar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addComponent(jButtonExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(jButtonExcluir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonVisualiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel2.setText("Pesquisar:");

        jTextFieldPesquisa.setText("Informe o nome do funcionario");
        jTextFieldPesquisa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldPesquisaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldPesquisaFocusLost(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Lupa.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/refresh.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(215, 215, 215)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVisualiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualiarActionPerformed
        if (this.jTable1.getSelectedRow() >= 0) {
            String idSer = this.mostraIdServi((String) jTable1.getValueAt(jTable1.getSelectedRow(), 2));
            ViewproductsScreen vp = new ViewproductsScreen(null, true, idSer, (String) jTable1.getValueAt(jTable1.getSelectedRow(), 0),(String) jTable1.getValueAt(jTable1.getSelectedRow(), 3));
            vp.setResizable(false);
            vp.setLocationRelativeTo(null);
            vp.setVisible(true);
        }
    }//GEN-LAST:event_jButtonVisualiarActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        model.setNumRows(0);
        this.motrarRegistro();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextFieldPesquisaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPesquisaFocusGained
        if (this.jTextFieldPesquisa.getText().equals("Informe o nome do funcionario")) {
            this.jTextFieldPesquisa.setText("");
        }
    }//GEN-LAST:event_jTextFieldPesquisaFocusGained

    private void jTextFieldPesquisaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPesquisaFocusLost
        if (this.jTextFieldPesquisa.getText().equals("")) {
            this.jTextFieldPesquisa.setText("Informe o nome do funcionario");
        }
    }//GEN-LAST:event_jTextFieldPesquisaFocusLost

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (this.verificaPesquisa()) {
            try {
                this.model.setNumRows(0);
                Connection con = ConnectionFactory.getConnection();
                String query = ("select * from registro_producao , funcionario where registro_producao.id_funcionario = funcionario.id and funcionario.nome_reduzido like ?");
                PreparedStatement cnd = con.prepareStatement(query);
                System.out.println("dadsadadd");
                cnd.setString(1, "%" + this.jTextFieldPesquisa.getText() + "%");
                ResultSet rs = cnd.executeQuery();
                if (rs.next()) {
                    String dataInvetida = rs.getString("data");
                    String dataInvetida2 = rs.getString("data_pagamento");
                    String data = dataInvetida.substring(8, 10) + "/" + dataInvetida.substring(5, 7) + "/" + dataInvetida.substring(0, 4);
                    String data2 = "";
                    if (dataInvetida2 != null) {
                        data2 = dataInvetida2.substring(8, 10) + "/" + dataInvetida2.substring(5, 7) + "/" + dataInvetida2.substring(0, 4);

                    }
                    Boolean pago = rs.getBoolean("pagar");
                    String func = this.mostraFunc(rs.getString("id_funcionario"));
                    String servi = this.mostraServi(rs.getString("id_servico"));
                    model.addRow(new Object[]{
                        rs.getString("id"),
                        func,
                        servi,
                        rs.getString("quantidade_servico"),
                        data,
                        data2,
                        pago});
                while (rs.next()) {
                    dataInvetida = rs.getString("data");
                    dataInvetida2 = rs.getString("data_pagamento");
                    data = dataInvetida.substring(8, 10) + "/" + dataInvetida.substring(5, 7) + "/" + dataInvetida.substring(0, 4);
                    data2 = "";
                    if (dataInvetida2 != null) {
                        data2 = dataInvetida2.substring(8, 10) + "/" + dataInvetida2.substring(5, 7) + "/" + dataInvetida2.substring(0, 4);

                    }
                    pago = rs.getBoolean("pagar");
                    func = this.mostraFunc(rs.getString("id_funcionario"));
                    servi = this.mostraServi(rs.getString("id_servico"));
                    model.addRow(new Object[]{
                        rs.getString("id"),
                        func,
                        servi,
                        rs.getString("quantidade_servico"),
                        data,
                        data2,
                        pago});
            }
            cnd.close();
            con.close();
            this.jTextFieldPesquisa.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Não foi possivel encontrar produção feita por esse artesão");
            this.jTextFieldPesquisa.setText("");
            this.motrarRegistro();
        }
        } catch (SQLException ex) {
        }
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonExcluir;
    private javax.swing.JButton jButtonVisualiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldPesquisa;
    // End of variables declaration//GEN-END:variables
    private final DefaultTableModel model;

    private void motrarRegistro() {
        try {
            Connection con = ConnectionFactory.getConnection();
            String query = ("select  * from registro_producao order by data asc");
            PreparedStatement cnd = con.prepareStatement(query);
            ResultSet rs = cnd.executeQuery();
            if (rs.next()) {
                String dataInvetida = rs.getString("data");
                String dataInvetida2 = rs.getString("data_pagamento");
                String data = dataInvetida.substring(8, 10) + "/" + dataInvetida.substring(5, 7) + "/" + dataInvetida.substring(0, 4);
                String data2 = "";
                if (dataInvetida2 != null) {
                    data2 = dataInvetida2.substring(8, 10) + "/" + dataInvetida2.substring(5, 7) + "/" + dataInvetida2.substring(0, 4);

                }
                Boolean pago = rs.getBoolean("pagar");
                String func = this.mostraFunc(rs.getString("id_funcionario"));
                String servi = this.mostraServi(rs.getString("id_servico"));
                model.addRow(new Object[]{
                    rs.getString("id"),
                    func,
                    servi,
                    rs.getString("quantidade_servico"),
                    data,
                    data2,
                    pago});
                while (rs.next()) {
                    dataInvetida = rs.getString("data");
                    dataInvetida2 = rs.getString("data_pagamento");
                    data = dataInvetida.substring(8, 10) + "/" + dataInvetida.substring(5, 7) + "/" + dataInvetida.substring(0, 4);
                    data2 = "";
                    if (dataInvetida2 != null) {
                        data2 = dataInvetida2.substring(8, 10) + "/" + dataInvetida2.substring(5, 7) + "/" + dataInvetida2.substring(0, 4);

                    }
                    pago = rs.getBoolean("pagar");
                    func = this.mostraFunc(rs.getString("id_funcionario"));
                    servi = this.mostraServi(rs.getString("id_servico"));
                    model.addRow(new Object[]{
                        rs.getString("id"),
                        func,
                        servi,
                        rs.getString("quantidade_servico"),
                        data,
                        data2,
                        pago});
                }
                cnd.close();
                con.close();
            }
        } catch (SQLException ex) {
        }
    }

    private String mostraFunc(String id) {
        Connection con;
        try {

            con = ConnectionFactory.getConnection();
            String query = ("select nome_reduzido from funcionario where id = " + id);
            PreparedStatement cnd = con.prepareStatement(query);
            ResultSet rs = cnd.executeQuery();
            rs.next();
            return rs.getString("nome_reduzido");
        } catch (SQLException ex) {
            return "";
        }
    }

    private String mostraServi(String id) {
        Connection con;
        try {
            con = ConnectionFactory.getConnection();
            String query = ("select nome_servico from servico where id = " + id);
            PreparedStatement cnd = con.prepareStatement(query);
            ResultSet rs = cnd.executeQuery();
            rs.next();
            return rs.getString("nome_servico");
        } catch (SQLException ex) {
            return "";
        }
    }

    private String mostraIdServi(String nome) {
        Connection con;
        try {
            con = ConnectionFactory.getConnection();
            String query = ("select * from servico where nome_servico =  ?");
            PreparedStatement cnd = con.prepareStatement(query);
            cnd.setString(1, nome);
            ResultSet rs = cnd.executeQuery();
            rs.next();
            return rs.getString("id");
        } catch (SQLException ex) {
            return "";
        }
    }

    private boolean verificaPesquisa() {
        if (this.jTextFieldPesquisa.equals("")) {
            this.jTextFieldPesquisa.requestFocus();
            JOptionPane.showMessageDialog(null, "Preencha o campo pesquisa");
            return false;
        }

        return true;
    }
}
